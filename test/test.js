// Generated by CoffeeScript 1.6.2
var assert, async, e, jy, pluginDir, root, toType;

pluginDir = __dirname + '/../';

toType = function(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};

assert = require('chai').assert;

async = require('async');

try {
  jy = require('jellyjs');
} catch (_error) {
  e = _error;
  root = __dirname + '/../../../../';
  jy = require("" + root + "/index.js");
}

describe('#Plugin::template', function() {
  it('Should load the plugin', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.getPluginDirectoryList().readPluginFromPath(pluginDir, 'template', function(err, dt) {
      return cb(err);
    });
  });
  it('Should transform everything into templates', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    jelly.setRootDirectory("" + __dirname + "/demo");
    return async.series([
      function(cb) {
        return jelly.readJellyConfigurationFile(function(err) {
          return cb(err, null);
        });
      }, function(cb) {
        return jelly.readAllGeneralConfigurationFiles(function(err) {
          return cb(err, null);
        });
      }, function(cb) {
        return jelly.getPluginDirectoryList().readPluginFromPath(pluginDir, 'template', function(err, dt) {
          return cb(err);
        });
      }, function(cb) {
        return jelly.applyPluginsSpecified(true, function(err) {
          return cb(err);
        });
      }, function(cb) {
        var content, file;

        try {
          file = jelly.getChildByIdRec('module1-file1.tpl');
          content = file.getCurrentContent();
          assert.equal(content.extension, '__template');
          assert.equal(toType(content.content), 'function');
          assert.equal(content.content(), 'TPL TEST');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      }
    ], function(err) {
      return cb(err);
    });
  });
  it('Should work with Module postProcess', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.boot({
      directory: "" + __dirname + "/demoPostProcess",
      folderPlugins: [
        {
          name: 'template',
          directory: pluginDir
        }
      ],
      onBeforeApplyPlugins: function(cb) {
        var postProcess;

        postProcess = jelly.getSharedObjectManager().getObject('template', 'postProcess').getCurrentContent();
        postProcess.TEST = function(arg) {
          return "__" + arg.TEST + "__";
        };
        return cb();
      }
    }, function(err) {
      var content, file;

      try {
        file = jelly.getChildByIdRec('module1-file1.tpl');
        content = file.getCurrentContent();
        assert.equal(content.extension, '__template');
        assert.equal(toType(content.content), 'function');
        assert.equal(content.content(), 'TPL TEST__1__');
        return cb();
      } catch (_error) {
        e = _error;
        return cb(e);
      }
    });
  });
  it('Should work with GeneralConfiguration postProcess', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.boot({
      directory: "" + __dirname + "/demoPostProcessGeneralConfig",
      folderPlugins: [
        {
          name: 'template',
          directory: pluginDir
        }
      ],
      onBeforeApplyPlugins: function(cb) {
        var postProcess;

        postProcess = jelly.getSharedObjectManager().getObject('template', 'postProcess').getCurrentContent();
        postProcess.TEST = function(arg) {
          return "__" + arg.TEST + "__";
        };
        return cb();
      }
    }, function(err) {
      var content, file;

      try {
        file = jelly.getChildByIdRec('module1-file1.tpl');
        content = file.getCurrentContent();
        assert.equal(content.extension, '__template');
        assert.equal(toType(content.content), 'function');
        assert.equal(content.content(), 'TPL TEST__1____2__');
        return cb();
      } catch (_error) {
        e = _error;
        return cb(e);
      }
    });
  });
  it('Partials includes should work', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.boot({
      directory: "" + __dirname + "/demoTemplateInclude",
      folderPlugins: [
        {
          name: 'template',
          directory: pluginDir
        }
      ],
      onBeforeApplyPlugins: function(cb) {
        var postProcess;

        postProcess = jelly.getSharedObjectManager().getObject('template', 'postProcess').getCurrentContent();
        postProcess.TEST = function(arg) {
          return "__" + arg.TEST + "__";
        };
        return cb();
      }
    }, function(err) {
      var content, file;

      if (err != null) {
        cb(err);
        cb = function() {};
        return;
      }
      try {
        file = jelly.getChildByIdRec('module1-file2.tpl');
        content = file.getCurrentContent();
        assert.equal(content.extension, '__template');
        assert.equal(toType(content.content), 'function');
        assert.equal(content.content(), 'TEMPLATE2_BEFORE["module1-file2.tpl","module1-file1.tpl"]TPL TEST__1____2__TEMPLATE2_AFTER["module1-file2.tpl"]');
        file = jelly.getChildByIdRec('module1-file1.tpl');
        content = file.getCurrentContent();
        assert.equal(content.extension, '__template');
        assert.equal(toType(content.content), 'function');
        assert.equal(content.content(), '["module1-file1.tpl"]TPL TEST__1____2__');
        return cb();
      } catch (_error) {
        e = _error;
        return cb(e);
      }
    });
  });
  return it('Sould have a \'dependencies\' property', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.boot({
      directory: "" + __dirname + "/demoTemplateInclude",
      folderPlugins: [
        {
          name: 'template',
          directory: pluginDir
        }
      ],
      onBeforeApplyPlugins: function(cb) {
        var postProcess;

        postProcess = jelly.getSharedObjectManager().getObject('template', 'postProcess').getCurrentContent();
        postProcess.TEST = function(arg) {
          return "__" + arg.TEST + "__";
        };
        return cb();
      }
    }, function(err) {
      var content, file;

      if (err != null) {
        cb(err);
        cb = function() {};
        return;
      }
      try {
        file = jelly.getChildByIdRec('module1-file2.tpl');
        content = file.getLastOfProperty('dependencies');
        assert.equal(toType(content), 'array');
        assert.equal(JSON.stringify(content), '["module1-file2.tpl","module1-file1.tpl"]');
        return cb();
      } catch (_error) {
        e = _error;
        return cb(e);
      }
    });
  });
});
