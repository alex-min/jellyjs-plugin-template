// Generated by CoffeeScript 1.6.2
var dot, dotParsing, dotProcessingArguments, fs, processFile, processFileModule, processGeneralConfig, processModule, _beginStackFile, _beginStackPartial, _endStack;

dot = require('dot');

fs = require('fs');

dotParsing = require('./dotParsing');

dotProcessingArguments = {
  "if": function(arg) {
    return ";if (" + arg + ");{";
  },
  endif: function() {
    return ";};";
  },
  nop: "",
  postProcess: function() {
    return "";
  },
  displayStack: function() {
    return "{{=(typeof(_stack)==='undefined')? '[]':JSON.stringify(_stack)}}";
  },
  getCurrentFile: function() {}
};

_beginStackFile = function(fileid) {
  return "{{;var _stack = ['" + fileid + "'];}}";
};

_beginStackPartial = function(fileid) {
  return "{{;_stack.push('" + fileid + "');}}";
};

_endStack = function() {
  return "{{;_stack.pop();}}";
};

processFile = function(dot, file, dependencies) {
  var contentToCompile, ct, e, output;

  contentToCompile = '';
  try {
    ct = file.getCurrentContent();
    console.log(file.getId());
    contentToCompile = _beginStackFile(file.getId()) + ct.content + _endStack();
    output = dot.compile(contentToCompile || '', dotProcessingArguments);
    return file.updateContent({
      extension: '__template',
      content: output,
      dependencies: dependencies
    });
  } catch (_error) {
    e = _error;
    throw new Error("Cannot compile " + (file.getId()) + ", " + e.message + ", " + contentToCompile);
  }
};

processFileModule = function(dot, file) {
  var contentToCompile, ct, e, output;

  contentToCompile = '';
  try {
    ct = file.getCurrentContent();
    contentToCompile = ct.content.toString();
    output = dot.compile(contentToCompile || '', dotProcessingArguments);
    return file.updateContent({
      extension: '__template',
      content: new Function('return ' + output())()
    });
  } catch (_error) {
    e = _error;
    throw new Error("Cannot compile " + (file.getId()) + ", " + e.message + ", " + contentToCompile);
  }
};

processModule = function(dot, module) {
  var file, _i, _len, _ref, _results;

  _ref = module.getChildList();
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    file = _ref[_i];
    _results.push(processFileModule(dot, file));
  }
  return _results;
};

processGeneralConfig = function(dot, generalconfig) {
  var module, _i, _len, _ref, _results;

  _ref = generalconfig.getChildList();
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    module = _ref[_i];
    _results.push(processModule(dot, module));
  }
  return _results;
};

module.exports = {
  load: function(cb) {
    this.getSharedObjectManager().registerObject('template', 'postProcess', {});
    return cb();
  },
  oncall: function(obj, params, cb) {
    var dependencies, options, postProcess, self, _ref;

    self = this;
    if ((_ref = params.pluginParameters) == null) {
      params.pluginParameters = {};
    }
    options = params.pluginParameters.template || {};
    dependencies = [];
    postProcess = this.getSharedObjectManager().getObject('template', 'postProcess').getCurrentContent();
    dotProcessingArguments.postProcess = function(name, args) {
      var e;

      if (typeof postProcess[name] === 'undefined' || postProcess[name] === null) {
        throw new Error("Unable to process " + name + " on postProcess");
        return;
      }
      if (typeof postProcess[name] !== 'function') {
        throw new Error("Invalid function (" + (typeof postProcess[name]) + ") given as argument on postProces");
        return;
      }
      try {
        return postProcess[name](args) || '';
      } catch (_error) {
        e = _error;
        throw new Error("Error encountered when executing " + name + " as an argument on template postProcess");
      }
    };
    dotProcessingArguments.include = function(fileId) {
      var err, file, jelly, tplContent;

      err = "[" + ((self.getParent() || {
        getId: function() {
          return {};
        }
      }).getId()) + "]:";
      jelly = self.getParentOfClass('Jelly');
      file = jelly.getChildByIdRec(fileId);
      if (file === null) {
        throw new Error("" + err + " Cannot find fild Id '" + fileId + "' on include statement");
      }
      tplContent = file.getLastContentOfExtension('tpl');
      if (tplContent === null) {
        throw new Error("" + err + " There is no tpl content loaded for '" + fileId + "' on include statement");
      }
      dependencies.push(fileId);
      return _beginStackPartial(fileId) + tplContent.content + _endStack();
    };
    dot.templateSettings.strip = options.strip || false;
    if (obj.GeneralConfiguration === true) {
      dotParsing.setGeneralConfigFileSettings(dot.templateSettings);
      processGeneralConfig(dot, obj);
    } else if (obj.Module === true) {
      dotParsing.setModuleSettings(dot.templateSettings);
      processModule(dot, obj);
    } else if (obj.File === true) {
      dependencies.push(obj.getId());
      dotParsing.setFileSettings(dot.templateSettings);
      processFile(dot, obj, dependencies);
    }
    return cb(null, obj);
  },
  unload: function(cb) {
    return cb();
  }
};
