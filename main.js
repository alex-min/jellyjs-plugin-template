// Generated by CoffeeScript 1.6.2
var dot, dotProcessingArguments, fs, processFile, processFileModule, processModule;

dot = require('dot');

fs = require('fs');

dotProcessingArguments = {
  "if": function(arg) {
    return ";if (" + arg + ");{";
  },
  endif: function() {
    return ";};";
  },
  nop: "",
  postProcess: function() {
    return "";
  }
};

processFile = function(dot, file) {
  var ct, output;

  ct = file.getCurrentContent();
  output = dot.compile(ct.content || '', dotProcessingArguments);
  return file.updateContent({
    extension: '__template',
    content: output
  });
};

processFileModule = function(dot, file) {
  var ct, output;

  ct = file.getCurrentContent();
  output = dot.compile(ct.content.toString() || '', dotProcessingArguments);
  return file.updateContent({
    extension: '__template',
    content: new Function('return ' + output())()
  });
};

processModule = function(dot, obj, cb) {
  var file, _i, _len, _ref;

  _ref = obj.getChildList();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    file = _ref[_i];
    processFileModule(dot, file);
  }
  return cb();
};

module.exports = {
  load: function(cb) {
    this.getSharedObjectManager().registerObject('template', 'postProcess', {});
    return cb();
  },
  oncall: function(obj, params, cb) {
    var e, postProcess, t;

    postProcess = this.getSharedObjectManager().getObject('template', 'postProcess').getCurrentContent();
    dotProcessingArguments.postProcess = function(name, args) {
      var e;

      if (typeof postProcess[name] === 'undefined' || postProcess[name] === null) {
        throw new Error("Unable to process " + name + " on postProcess");
        return;
      }
      if (typeof postProcess[name] !== 'function') {
        throw new Error("Invalid function (" + (typeof postProcess[name]) + ") given as argument on postProces");
        return;
      }
      try {
        return postProcess[name](args) || '';
      } catch (_error) {
        e = _error;
        throw new Error("Error encountered when executing " + name + " as an argument on template postProcess");
      }
    };
    t = dot.templateSettings;
    t.strip = false;
    if (obj.Module === true) {
      t.evaluate = /\[\[([\s\S]+?\]?)\]\]/g;
      t.interpolate = /\[\[=([\s\S]+?)\]\]/g;
      t.encode = /\[\[!([\s\S]+?)\]\]/g;
      t.use = /\[\[#([\s\S]+?)\]\]/g;
      t.useParams = /(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\[[^\]]+\])/g;
      t.define = /\[\[##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\]\]/g;
      t.defineParams = /^\s*([\w$]+):([\s\S]+)/;
      t.conditional = /\[\[\?(\?)?\s*([\s\S]*?)\s*\]\]/g;
      t.iterate = /\[\[~\s*(?:\]\]|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\]\])/g;
      processModule(dot, obj, cb);
      return;
    }
    if (obj.File === true) {
      t.evaluate = /\{\{([\s\S]+?\}?)\}\}/g;
      t.interpolate = /\{\{=([\s\S]+?)\}\}/g;
      t.encode = /\{\{!([\s\S]+?)\}\}/g;
      t.use = /\{\{#([\s\S]+?)\}\}/g;
      t.useParams = /(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\{[^\}]+\})/g;
      t.define = /\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g;
      t.defineParams = /^\s*([\w$]+):([\s\S]+)/;
      t.conditional = /\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g;
      t.iterate = /\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g;
    }
    try {
      processFile(dot, obj);
      return cb(null, obj);
    } catch (_error) {
      e = _error;
      return cb(e);
    }
  },
  unload: function(cb) {
    return cb();
  }
};
