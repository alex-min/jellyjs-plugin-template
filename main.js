// Generated by CoffeeScript 1.6.2
var dot, dotParsing, dotProcessingArguments, fs, processFile, processFileModule, processModule;

dot = require('dot');

fs = require('fs');

dotParsing = require('./dotParsing');

dotProcessingArguments = {
  "if": function(arg) {
    return ";if (" + arg + ");{";
  },
  endif: function() {
    return ";};";
  },
  nop: "",
  postProcess: function() {
    return "";
  }
};

processFile = function(dot, file) {
  var ct, output;

  ct = file.getCurrentContent();
  output = dot.compile(ct.content || '', dotProcessingArguments);
  return file.updateContent({
    extension: '__template',
    content: output
  });
};

processFileModule = function(dot, file) {
  var ct, output;

  ct = file.getCurrentContent();
  output = dot.compile(ct.content.toString() || '', dotProcessingArguments);
  return file.updateContent({
    extension: '__template',
    content: new Function('return ' + output())()
  });
};

processModule = function(dot, obj) {
  var file, _i, _len, _ref, _results;

  _ref = obj.getChildList();
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    file = _ref[_i];
    _results.push(processFileModule(dot, file));
  }
  return _results;
};

module.exports = {
  load: function(cb) {
    this.getSharedObjectManager().registerObject('template', 'postProcess', {});
    return cb();
  },
  oncall: function(obj, params, cb) {
    var postProcess;

    postProcess = this.getSharedObjectManager().getObject('template', 'postProcess').getCurrentContent();
    dotProcessingArguments.postProcess = function(name, args) {
      var e;

      if (typeof postProcess[name] === 'undefined' || postProcess[name] === null) {
        throw new Error("Unable to process " + name + " on postProcess");
        return;
      }
      if (typeof postProcess[name] !== 'function') {
        throw new Error("Invalid function (" + (typeof postProcess[name]) + ") given as argument on postProces");
        return;
      }
      try {
        return postProcess[name](args) || '';
      } catch (_error) {
        e = _error;
        throw new Error("Error encountered when executing " + name + " as an argument on template postProcess");
      }
    };
    dot.templateSettings.strip = false;
    if (obj.Module === true) {
      dotParsing.setModuleSettings(dot.templateSettings);
      processModule(dot, obj);
    } else if (obj.File === true) {
      dotParsing.setFileSettings(dot.templateSettings);
      processFile(dot, obj);
    }
    return cb(null, obj);
  },
  unload: function(cb) {
    return cb();
  }
};
